[DOCUMENT]
MID: REQ-DOC-001
TITLE: Media Indexer Requirements

[REQUIREMENT]
UID: REQ-001
STATEMENT: All requirements documentation shall be written in StrictDoc (.sdoc) format and the grammar of the requirements document shall be validated by the strictdoc tool.

[REQUIREMENT]
UID: REQ-002
STATEMENT: The tool shall analyze all images in the specified collection (2.2TB+) and generate sidecar files containing extracted metadata for each image.

[REQUIREMENT]
UID: REQ-003
STATEMENT: EXIF data parsing shall be performed using the fast-exif-rs-py library for optimal performance.

[REQUIREMENT]
UID: REQ-004
STATEMENT: Sidecar files shall be generated for each processed image containing extracted metadata (faces, objects, poses, EXIF data) using the image-sidecar-rust library (https://github.com/dapperfu/image-sidecar-rust).

[REQUIREMENT]
UID: REQ-005
STATEMENT: A complete pyproject.toml file shall be included with all necessary dependencies including image-sidecar-rust, insightface, ultralytics, torch, and GPU acceleration libraries.

[REQUIREMENT]
UID: REQ-006
STATEMENT: The tool shall operate exclusively on GPU hardware. CPU fallback shall be disabled and the tool shall fail if no GPU is available.

[REQUIREMENT]
UID: REQ-021
STATEMENT: There shall be no Python fallback for any external module which has been specifically called out in the requirements. The tool shall fail if any required external module is not available.

[REQUIREMENT]
UID: REQ-007
STATEMENT: Face recognition shall be performed using the insightface library, the yolov8-face model, and the yolov11-face model.

[REQUIREMENT]
UID: REQ-008
STATEMENT: Object detection shall be performed using the YOLOv12x model downloaded from https://github.com/ultralytics/assets/releases/download/v8.3.0/yolo12x.pt

[REQUIREMENT]
UID: REQ-009
STATEMENT: Human pose detection shall be performed using the YOLOv11-pose model.

[REQUIREMENT]
UID: REQ-010
STATEMENT: All code components shall be directly linked to specific requirements and labeled with the corresponding requirement ID (REQ-###).

[REQUIREMENT]
UID: REQ-011
STATEMENT: The tool shall support checkpoint and resume functionality to allow processing to resume after interruption, tracking processed images to avoid reprocessing.

[REQUIREMENT]
UID: REQ-012
STATEMENT: The tool shall provide real-time progress tracking with statistics including processing speed (images/sec, MB/sec), estimated time to completion (ETA), and a final summary report.

[REQUIREMENT]
UID: REQ-013
STATEMENT: The tool shall implement idempotent processing by detecting and skipping already-processed images based on existing sidecar files, with options for selective reprocessing.

[REQUIREMENT]
UID: REQ-014
STATEMENT: The tool shall support configurable batch processing with memory-aware batch sizing to balance processing speed and GPU memory constraints.

[REQUIREMENT]
UID: REQ-015
STATEMENT: The tool shall implement robust error handling to gracefully handle corrupted or unreadable images, log errors, continue processing, and report error statistics at completion with optional retry mechanisms.

[REQUIREMENT]
UID: REQ-016
STATEMENT: The tool shall implement multi-level verbosity logging with support for verbose flags (-v through -vvvv): -vvvvv for DEBUG level (10), -vvvv for TRACE level with TQDM progress bars (12), -vvv for VERBOSE level with detailed processing info (15), -vv for DETAILED file-by-file processing (17), -v for INFO level (20), and default WARNING level (30) showing only warnings and errors. Structured logging shall be configured with file destination options.

[REQUIREMENT]
UID: REQ-017
STATEMENT: The tool shall support configuration file (YAML/TOML) for batch processing settings with CLI argument override capability.

[REQUIREMENT]
UID: REQ-018
STATEMENT: The tool shall support image format filtering to specify which image formats to process, defaulting to common formats (JPEG, PNG, TIFF, RAW).

[REQUIREMENT]
UID: REQ-019
STATEMENT: The tool shall provide an optional SQLite database index for extracted metadata to enable querying by faces, objects, poses, and EXIF tags.

[REQUIREMENT]
UID: REQ-022
STATEMENT: The tool shall use PonyORM as the Object-Relational Mapping (ORM) framework for database operations.

[REQUIREMENT]
UID: REQ-023
STATEMENT: Each PonyORM model entity (Image, Face, Object, Pose, EXIFData) shall be defined in a separate file within the db module directory.

[REQUIREMENT]
UID: REQ-024
STATEMENT: The database schema shall implement relational design with proper foreign key relationships: Image (1:N with Face, Object, Pose), Image (1:1 with EXIFData, ImageMetadata).

[REQUIREMENT]
UID: REQ-025
STATEMENT: The tool shall support database storage mode with the --db flag specifying the database file path. When specified, metadata shall be stored in the database.

[REQUIREMENT]
UID: REQ-026
STATEMENT: The tool shall support the --no-sidecar flag to disable sidecar file generation when using database storage mode.

[REQUIREMENT]
UID: REQ-027
STATEMENT: The tool shall support concurrent storage to both database and sidecar files when --db is specified without --no-sidecar.

[REQUIREMENT]
UID: REQ-028
STATEMENT: The database schema shall be designed to support efficient querying by face embeddings, object classes, pose keypoints, and EXIF tags without requiring schema changes for new query patterns.

[REQUIREMENT]
UID: REQ-020
STATEMENT: The tool shall implement performance optimization including parallel processing with thread-based I/O operations, batch processing for GPU acceleration, and optimized default batch sizing based on available VRAM (default 4 images per batch for 12GB VRAM).

[REQUIREMENT]
UID: REQ-029
STATEMENT: The tool shall support subcommand-based CLI operation with commands: extract (extract features from images), annotate (add features to images), and convert (migrate data between sidecar and database formats).

[REQUIREMENT]
UID: REQ-030
STATEMENT: The 'extract' subcommand shall process images and extract features including faces, objects, poses, and EXIF data, storing results in sidecar files and/or database as specified by configuration.

[REQUIREMENT]
UID: REQ-031
STATEMENT: The 'annotate' subcommand shall process images and add features (faces, objects, poses, EXIF data) as annotations, storing results in sidecar files and/or database as specified by configuration.

[REQUIREMENT]
UID: REQ-032
STATEMENT: The 'convert' subcommand shall support importing existing sidecar files into the database, allowing migration from sidecar-only storage to database storage.

[REQUIREMENT]
UID: REQ-033
STATEMENT: The 'convert' subcommand shall support exporting database contents to sidecar files, allowing extraction of database-stored features to individual sidecar JSON files.

[REQUIREMENT]
UID: REQ-034
STATEMENT: The 'convert' subcommand shall provide --direction flag with values 'to-db' (import sidecar to database) and 'to-sidecar' (export database to sidecar).

[REQUIREMENT]
UID: REQ-035
STATEMENT: The tool shall maintain backwards compatibility with legacy CLI usage where subcommands are not explicitly specified, automatically defaulting to the extract subcommand.

[REQUIREMENT]
UID: REQ-036
STATEMENT: All Python functions and files SHALL be documented to meet NumPy documentation standards as specified in the NumPy documentation style guide.

[REQUIREMENT]
UID: REQ-037
STATEMENT: Python dependency management shall use uv for installation of all packages. The virtual environment creation process shall install uv using pip, and subsequent package installations shall use 'uv pip install'.

[REQUIREMENT]
UID: REQ-038
STATEMENT: All imports in the CLI module shall be lazy-loaded (imported only when the specific command is executed) to minimize startup time for the media-indexer command. Imports of heavy dependencies (torch, ultralytics, image-sidecar-rust) shall not occur until the command actually needs them.

[REQUIREMENT]
UID: REQ-039
STATEMENT: The tool shall support a --limit flag to process only a specified number of images, enabling testing on small subsets before processing large image collections.

[REQUIREMENT]
UID: REQ-040
STATEMENT: The tool shall support RAW image formats (CR2, NEF, ARW, DNG, etc.) by converting them to temporary JPEG files in memory for YOLO processing using the rawpy library.

[REQUIREMENT]
UID: REQ-041
STATEMENT: All StrictDoc (.sdoc) documents SHALL follow the StrictDoc grammar rules as defined at https://github.com/strictdoc-project/strictdoc/blob/main/strictdoc/backend/sdoc/grammar/grammar.py

[REQUIREMENT]
UID: REQ-042
STATEMENT: All StrictDoc (.sdoc) documents SHALL not have C-style comments at the top of the file.

[REQUIREMENT]
UID: REQ-042
STATEMENT: All StrictDoc (.sdoc) documents SHALL have the tool (Cursor.AI) and model (Claude) listed in any Git commit message involving a StrictDoc.

[REQUIREMENT]
UID: REQ-043
STATEMENT: All StrictDoc (.sdoc) documents SHALL be validated using the strictdoc CLI tool to ensure grammar compliance.

[REQUIREMENT]
UID: REQ-044
STATEMENT: ALL notebooks must be generated programmatically from a .py script. The .py script shall have the same name as the .ipynb notebook and shall be the golden master for the notebook. If the notebooks need to be regenerated they are regenerated from the .py script.

[REQUIREMENT]
UID: REQ-045
STATEMENT: All code changes SHALL have an accompanying requirement in the requirements documentation. Requirements SHALL be tracked in StrictDoc format. When implementing new features or functionality, ensure the corresponding requirement exists or create it. All code MUST trace back to at least one requirement.

[REQUIREMENT]
UID: REQ-046
STATEMENT: The git user SHALL be changed to "<username> | Cursor.sh | <model>" where <username> is the output of the whoami command. This way any git commit changed by you will be known as automated.

[REQUIREMENT]
UID: REQ-047
STATEMENT: ALL git commits SHALL be followed by a git push if and only if a remote exists.

[REQUIREMENT]
UID: REQ-048
STATEMENT: The commit message SHALL include the filename and what changed / why it was added. In addition to a summary of the prompt as to why the changes were made.

[REQUIREMENT]
UID: REQ-049
STATEMENT: ALWAYS pull from remote before committing changes.

[REQUIREMENT]
UID: REQ-050
STATEMENT: Never under any circumstances SHALL rm -rf be run on ~/ (the user's home directory).

[REQUIREMENT]
UID: REQ-051
STATEMENT: Under no circumstances should sudo be run. All commands SHALL be done in userspace.

[REQUIREMENT]
UID: REQ-052
STATEMENT: The exclamation mark (!) SHALL NOT be used in strings meant for the command line / bash.

[REQUIREMENT]
UID: REQ-053
STATEMENT: The system pip SHALL NOT be used. All Python related matters SHALL use a virtual environment.

[REQUIREMENT]
UID: REQ-054
STATEMENT: Python packages SHALL NOT be installed to the system. All Python related matters SHALL use a virtual environment.

[REQUIREMENT]
UID: REQ-055
STATEMENT: All Python related matters SHALL use a virtual environment. The Python virtual environment SHALL be called `venv`

[REQUIREMENT]
UID: REQ-056
STATEMENT: All Makefile references to pip and python installed tools like pytest SHALL use the full path to the venv bin directory, eg `venv/bin/pytest`, `venv/bin/pip`

[REQUIREMENT]
UID: REQ-057
STATEMENT: All python language scripts SHALL use full mypy typing.

[REQUIREMENT]
UID: REQ-058
STATEMENT: All python language scripts SHALL be documented such that they meet numpy style guidelines.

[REQUIREMENT]
UID: REQ-059
STATEMENT: ALL functions and files in Python SHALL be documented to meet numpy documentation standards.

[REQUIREMENT]
UID: REQ-060
STATEMENT: Always include a detailed technical attribution comment at the top of each commit message with a specified format including the exact LLM model version identifier (e.g., claude-3-5-sonnet-20241022, gpt-5, etc.), IDE information, generation method, code style, and dependencies. The model identifier MUST be the specific version, not a generic name like "Claude" or "ChatGPT".

[REQUIREMENT]
UID: REQ-061
STATEMENT: After all file changes add and commit.

[REQUIREMENT]
UID: REQ-062
STATEMENT: Makefiles SHALL use full escape for all variables: ${VAR} not $VAR to avoid confusion.

[REQUIREMENT]
UID: REQ-063
STATEMENT: All makefiles SHALL use an actual file/folder where possible as a target. For example python -mvenv venv generates venv. Any target that depends on Python having the venv built shall use `venv` as a dependency so that the GNU make resolves everything correctly and in the right order.

[REQUIREMENT]
UID: REQ-064
STATEMENT: The tool shall provide a CLI command to emit a default configuration file with all available options and their descriptions, enabling users to understand the syntax and use it as a template without creating configuration files from scratch.

[REQUIREMENT]
UID: REQ-065
STATEMENT: When determining the model version for commit attribution, the system SHALL use the most specific available model identifier. If an exact version identifier is available (e.g., from CURSOR_MODEL environment variable or system information), that specific version SHALL be used. Otherwise, the best available approximation SHALL be used, but MUST distinguish between different model families (e.g., Claude Sonnet 3.5, ChatGPT-5, GPT-4, etc.).

[REQUIREMENT]
UID: REQ-066
STATEMENT: When database storage is enabled with the --db flag, the database SHALL be properly initialized with all required tables (Image, Face, Object, Pose, EXIFData) before any metadata storage operations are performed. If database initialization fails or tables are not created, the tool SHALL raise an error and NOT proceed with processing.

[REQUIREMENT]
UID: REQ-067
STATEMENT: Database management operations SHALL be organized under a 'db' command group with subcommands: 'stats' (display database statistics), 'init' (initialize database), 'search' (search for images), and 'clean' (remove orphaned records). The CLI syntax SHALL be 'media-indexer db <subcommand>'.

