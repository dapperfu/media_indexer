[DOCUMENT]
MID: REQ-DOC-001
TITLE: Media Indexer Requirements

[REQUIREMENT]
UID: REQ-001
STATEMENT: All requirements documentation shall be written in StrictDoc (.sdoc) format and the grammar of the requirements document shall be validated by the strictdoc tool.

[REQUIREMENT]
UID: REQ-002
STATEMENT: The tool shall analyze all images in the specified collection (2.2TB+) and generate sidecar files containing extracted metadata for each image.

[REQUIREMENT]
UID: REQ-003
STATEMENT: EXIF data parsing shall be performed using the fast-exif-rs-py library for optimal performance.

[REQUIREMENT]
UID: REQ-004
STATEMENT: Sidecar files shall be generated for each processed image containing extracted metadata (faces, objects, poses, EXIF data) using the image-sidecar-rust library (https://github.com/dapperfu/image-sidecar-rust).

[REQUIREMENT]
UID: REQ-005
STATEMENT: A complete pyproject.toml file shall be included with all necessary dependencies including image-sidecar-rust, insightface, ultralytics, torch, and GPU acceleration libraries.

[REQUIREMENT]
UID: REQ-006
STATEMENT: The tool shall operate exclusively on GPU hardware. CPU fallback shall be disabled and the tool shall fail if no GPU is available.

[REQUIREMENT]
UID: REQ-021
STATEMENT: There shall be no Python fallback for any external module which has been specifically called out in the requirements. The tool shall fail if any required external module is not available.

[REQUIREMENT]
UID: REQ-007
STATEMENT: Face recognition shall be performed using the insightface library, the yolov8-face model, and the yolov11-face model.

[REQUIREMENT]
UID: REQ-008
STATEMENT: Object detection shall be performed using the YOLOv12x model downloaded from https://github.com/ultralytics/assets/releases/download/v8.3.0/yolo12x.pt

[REQUIREMENT]
UID: REQ-009
STATEMENT: Human pose detection shall be performed using the YOLOv11-pose model.

[REQUIREMENT]
UID: REQ-010
STATEMENT: All code components shall be directly linked to specific requirements and labeled with the corresponding requirement ID (REQ-###).

[REQUIREMENT]
UID: REQ-011
STATEMENT: The tool shall support checkpoint and resume functionality to allow processing to resume after interruption, tracking processed images to avoid reprocessing.

[REQUIREMENT]
UID: REQ-012
STATEMENT: The tool shall provide real-time progress tracking with statistics including processing speed (images/sec, MB/sec), estimated time to completion (ETA), and a final summary report.

[REQUIREMENT]
UID: REQ-013
STATEMENT: The tool shall implement idempotent processing by detecting and skipping already-processed images based on existing sidecar files, with options for selective reprocessing.

[REQUIREMENT]
UID: REQ-014
STATEMENT: The tool shall support configurable batch processing with memory-aware batch sizing to balance processing speed and GPU memory constraints.

[REQUIREMENT]
UID: REQ-015
STATEMENT: The tool shall implement robust error handling to gracefully handle corrupted or unreadable images, log errors, continue processing, and report error statistics at completion with optional retry mechanisms.

[REQUIREMENT]
UID: REQ-016
STATEMENT: The tool shall implement multi-level verbosity logging with support for verbose flags (-v through -vvvv): -vvvv for DEBUG level (10), -vvv for TRACE level with TQDM progress bars (12), -vv for VERBOSE level with detailed processing info (15), -v for DETAILED file-by-file processing (17), and default INFO level (20). Structured logging shall be configured with file destination options.

[REQUIREMENT]
UID: REQ-017
STATEMENT: The tool shall support configuration file (YAML/TOML) for batch processing settings with CLI argument override capability.

[REQUIREMENT]
UID: REQ-018
STATEMENT: The tool shall support image format filtering to specify which image formats to process, defaulting to common formats (JPEG, PNG, TIFF, RAW).

[REQUIREMENT]
UID: REQ-019
STATEMENT: The tool shall provide an optional SQLite database index for extracted metadata to enable querying by faces, objects, poses, and EXIF tags.

[REQUIREMENT]
UID: REQ-022
STATEMENT: The tool shall use PonyORM as the Object-Relational Mapping (ORM) framework for database operations.

[REQUIREMENT]
UID: REQ-023
STATEMENT: Each PonyORM model entity (Image, Face, Object, Pose, EXIFData) shall be defined in a separate file within the db module directory.

[REQUIREMENT]
UID: REQ-024
STATEMENT: The database schema shall implement relational design with proper foreign key relationships: Image (1:N with Face, Object, Pose), Image (1:1 with EXIFData, ImageMetadata).

[REQUIREMENT]
UID: REQ-025
STATEMENT: The tool shall support database storage mode with the --db flag specifying the database file path. When specified, metadata shall be stored in the database.

[REQUIREMENT]
UID: REQ-026
STATEMENT: The tool shall support the --no-sidecar flag to disable sidecar file generation when using database storage mode.

[REQUIREMENT]
UID: REQ-027
STATEMENT: The tool shall support concurrent storage to both database and sidecar files when --db is specified without --no-sidecar.

[REQUIREMENT]
UID: REQ-028
STATEMENT: The database schema shall be designed to support efficient querying by face embeddings, object classes, pose keypoints, and EXIF tags without requiring schema changes for new query patterns.

[REQUIREMENT]
UID: REQ-020
STATEMENT: The tool shall implement performance optimization including parallel processing with thread-based I/O operations, batch processing for GPU acceleration, and optimized default batch sizing based on available VRAM (default 4 images per batch for 12GB VRAM).

[REQUIREMENT]
UID: REQ-029
STATEMENT: The tool shall support subcommand-based CLI operation with commands: extract (extract features from images), annotate (add features to images), and convert (migrate data between sidecar and database formats).

[REQUIREMENT]
UID: REQ-030
STATEMENT: The 'extract' subcommand shall process images and extract features including faces, objects, poses, and EXIF data, storing results in sidecar files and/or database as specified by configuration.

[REQUIREMENT]
UID: REQ-031
STATEMENT: The 'annotate' subcommand shall process images and add features (faces, objects, poses, EXIF data) as annotations, storing results in sidecar files and/or database as specified by configuration.

[REQUIREMENT]
UID: REQ-032
STATEMENT: The 'convert' subcommand shall support importing existing sidecar files into the database, allowing migration from sidecar-only storage to database storage.

[REQUIREMENT]
UID: REQ-033
STATEMENT: The 'convert' subcommand shall support exporting database contents to sidecar files, allowing extraction of database-stored features to individual sidecar JSON files.

[REQUIREMENT]
UID: REQ-034
STATEMENT: The 'convert' subcommand shall provide --direction flag with values 'to-db' (import sidecar to database) and 'to-sidecar' (export database to sidecar).

[REQUIREMENT]
UID: REQ-035
STATEMENT: All Python functions and files SHALL be documented to meet NumPy documentation standards as specified in the NumPy documentation style guide.

[REQUIREMENT]
UID: REQ-036
STATEMENT: Python dependency management shall use uv for installation of all packages. The virtual environment creation process shall install uv using pip, and subsequent package installations shall use 'uv pip install'.


